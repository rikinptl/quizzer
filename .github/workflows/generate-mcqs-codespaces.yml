name: Generate MCQs with GitHub Codespaces

on:
  workflow_dispatch:
    inputs:
      filename:
        description: 'Name of the uploaded file (PDF/PPT)'
        required: true
        type: string
      difficulty:
        description: 'Difficulty level'
        required: false
        default: 'medium'
        type: choice
        options:
        - easy
        - medium
        - hard
      num_questions:
        description: 'Number of MCQs to generate'
        required: false
        default: '5'
        type: string

jobs:
  generate-mcqs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        pip install PyPDF2 python-pptx python-docx requests

    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.ai/install.sh | sh
        ollama serve &
        sleep 10
        ollama pull llama2

    - name: Verify file exists
      run: |
        if [ ! -f "uploads/${{ github.event.inputs.filename }}" ]; then
          echo "Error: File uploads/${{ github.event.inputs.filename }} not found"
          exit 1
        fi
        echo "File found: uploads/${{ github.event.inputs.filename }}"

    - name: Extract text from document
      run: |
        python scripts/extract_text.py "uploads/${{ github.event.inputs.filename }}" > extracted_text.txt
        echo "Text extraction completed"

    - name: Generate MCQs with Ollama
      run: |
        # Create prompt with extracted text
        cat > prompt.txt << EOF
        Generate ${{ github.event.inputs.num_questions }} multiple choice questions from the following text.
        Difficulty level: ${{ github.event.inputs.difficulty }}
        
        Text content:
        $(cat extracted_text.txt)
        
        Format each question as JSON with this structure:
        {
          "question": "Question text here?",
          "options": ["A) Option 1", "B) Option 2", "C) Option 3", "D) Option 4"],
          "correct_answer": "A",
          "explanation": "Brief explanation of why this is correct"
        }
        
        Return only valid JSON array format.
        EOF
        
        # Run Ollama and capture output
        echo "Running Ollama to generate MCQs..."
        ollama run llama2 < prompt.txt > mcq_output.json 2> ollama_error.log
        
        # Check if Ollama succeeded
        if [ $? -ne 0 ]; then
          echo "Ollama failed. Error log:"
          cat ollama_error.log
          exit 1
        fi

    - name: Generate HTML output
      run: |
        python scripts/generate_html.py "${{ github.event.inputs.filename }}" "${{ github.event.inputs.difficulty }}" "${{ github.event.inputs.num_questions }}"

    - name: Commit and push results
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add generated files
        git add mcq_output.json
        git add extracted_text.txt
        git add "results/mcqs_${{ github.event.inputs.filename }}.html"
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Generated MCQs for ${{ github.event.inputs.filename }} (Difficulty: ${{ github.event.inputs.difficulty }}, Questions: ${{ github.event.inputs.num_questions }})"
          git push
          echo "Results committed and pushed successfully"
        fi

    - name: Cleanup temporary files
      if: always()
      run: |
        rm -f prompt.txt ollama_error.log extracted_text.txt
