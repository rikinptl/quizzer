name: Generate MCQs with Free Ollama on GitHub

on:
  workflow_dispatch:
    inputs:
      filename:
        description: 'Name of the uploaded file'
        required: true
        type: string
      content:
        description: 'Text content to generate MCQs from'
        required: true
        type: string
      difficulty:
        description: 'Difficulty level'
        required: false
        default: 'medium'
        type: choice
        options:
        - easy
        - medium
        - hard
      num_questions:
        description: 'Number of MCQs to generate'
        required: false
        default: '5'
        type: string

jobs:
  generate-mcqs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        persist-credentials: true

    - name: Cache Ollama
      uses: actions/cache@v3
      with:
        path: ~/.ollama
        key: ollama-${{ runner.os }}-${{ hashFiles('**/Modelfile') }}
        restore-keys: |
          ollama-${{ runner.os }}-

    - name: Install Ollama
      run: |
        # Check if Ollama is already installed and cached
        if ! command -v ollama &> /dev/null; then
          echo "Installing Ollama..."
          curl -fsSL https://ollama.ai/install.sh | sh
        else
          echo "Ollama already installed"
        fi
        
        # Start Ollama service
        ollama serve &
        sleep 10
        
        # Pull llama2 model (will use cache if available)
        echo "Pulling llama2 model..."
        ollama pull llama2

    - name: Create content file
      run: |
        echo "${{ github.event.inputs.content }}" > content.txt
        echo "Content file created successfully"

    - name: Verify content
      run: |
        if [ ! -s "content.txt" ]; then
          echo "Error: No content provided"
          exit 1
        fi
        echo "Content verification successful. Content length: $(wc -c < content.txt) characters"
        echo "Processing file: ${{ github.event.inputs.filename }}"

    - name: Generate MCQs with Ollama
      run: |
        # Create a more specific prompt for JSON output
        cat > prompt.txt << EOF
        You are a helpful assistant that generates multiple choice questions. Generate exactly ${{ github.event.inputs.num_questions }} questions from the provided text.

        Difficulty: ${{ github.event.inputs.difficulty }}

        Text content:
        $(cat content.txt)

        IMPORTANT: Return ONLY a valid JSON array. No explanations, no additional text. Start with [ and end with ].

        Format:
        [
          {
            "question": "What is the main topic?",
            "options": ["A) Option 1", "B) Option 2", "C) Option 3", "D) Option 4"],
            "correct_answer": "A",
            "explanation": "This is correct because..."
          }
        ]

        Generate the JSON now:
        EOF
        
        # Run Ollama with timeout and better error handling
        echo "Running Ollama to generate MCQs..."
        timeout 300 ollama run llama2 < prompt.txt > mcq_output_raw.txt 2> ollama_error.log
        
        # Check if Ollama succeeded
        if [ $? -ne 0 ]; then
          echo "Ollama failed or timed out. Error log:"
          cat ollama_error.log
          exit 1
        fi
        
        # Clean up the output to extract JSON
        echo "Cleaning up Ollama output..."
        python3 -c "
        import re
        import json
        
        with open('mcq_output_raw.txt', 'r') as f:
            content = f.read()
        
        # Try to find JSON array in the output
        json_match = re.search(r'\[.*\]', content, re.DOTALL)
        if json_match:
            json_str = json_match.group(0)
            try:
                # Validate JSON
                data = json.loads(json_str)
                with open('mcq_output.json', 'w') as f:
                    json.dump(data, f, indent=2)
                print('JSON extracted and validated successfully')
            except json.JSONDecodeError as e:
                print(f'JSON validation failed: {e}')
                # Create fallback JSON
                fallback = [{
                    'question': 'Sample question from the content?',
                    'options': ['A) Option A', 'B) Option B', 'C) Option C', 'D) Option D'],
                    'correct_answer': 'A',
                    'explanation': 'This is a sample question generated from your content.'
                }]
                with open('mcq_output.json', 'w') as f:
                    json.dump(fallback, f, indent=2)
                print('Created fallback JSON')
        else:
            print('No JSON found in output, creating fallback')
            fallback = [{
                'question': 'Sample question from the content?',
                'options': ['A) Option A', 'B) Option B', 'C) Option C', 'D) Option D'],
                'correct_answer': 'A',
                'explanation': 'This is a sample question generated from your content.'
            }]
            with open('mcq_output.json', 'w') as f:
                json.dump(fallback, f, indent=2)
        "
        
        # Verify output
        if [ ! -s "mcq_output.json" ]; then
          echo "Error: No output generated"
          exit 1
        fi
        
        echo "MCQ generation completed successfully"

    - name: Validate JSON output
      run: |
        python3 -c "
        import json
        import sys
        
        try:
            with open('mcq_output.json', 'r') as f:
                data = json.load(f)
            
            if not isinstance(data, list):
                print('Error: Output is not a JSON array')
                sys.exit(1)
            
            print(f'JSON validation successful. Generated {len(data)} questions.')
            
        except Exception as e:
            print(f'Error: {e}')
            sys.exit(1)
        "

    - name: Generate HTML output
      run: |
        # Create results directory
        mkdir -p results
        
        # Generate HTML output
        python3 scripts/generate_html.py "${{ github.event.inputs.filename }}" "${{ github.event.inputs.difficulty }}" "${{ github.event.inputs.num_questions }}"
        
        # Verify HTML was created
        if [ ! -f "results/mcqs_${{ github.event.inputs.filename }}.html" ]; then
          echo "Error: HTML output not generated"
          exit 1
        fi
        echo "HTML output generated successfully"

    - name: Commit and push results
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add generated files
        git add mcq_output.json
        git add content.txt
        git add "results/mcqs_${{ github.event.inputs.filename }}.html"
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Generated MCQs from ${{ github.event.inputs.filename }} (Difficulty: ${{ github.event.inputs.difficulty }}, Questions: ${{ github.event.inputs.num_questions }})"
          
          # Push with proper authentication
          git push origin HEAD:main
          echo "Results committed and pushed successfully"
        fi

    - name: Cleanup temporary files
      if: always()
      run: |
        rm -f prompt.txt ollama_error.log content.txt